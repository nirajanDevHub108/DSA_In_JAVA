Introuction
Object-Oriented Programming, often abbreviated as OOP, is a programming paradigm based on the concept of Classes and Objects, which can contain data and code to manipulate that data. Understanding OOP is vital as it allows for more organized, modular, and reusable code, which is particularly important when dealing with complex problems in Data Structures and Algorithms.

Classes and Objects
Class: In Java, a class serves as a blueprint or a template for creating objects. A class encapsulates data for the object and methods to manipulate that data. Code in Java is typically defined within a class, as Java is an object-oriented programming language, which means that almost everything revolves around the concept of objects and classes.

Object: An object is an instance of a class. When a class is defined, no memory is allocated or action performed until an object is created from that class. An object is a real-world entity that represents the specific instance of the blueprint (class). It holds actual data in the form of attributes and can perform actions using the methods defined in the class.

Access Specifiers:
Access specifiers in Java determine the visibility and accessibility of classes, methods, and variables. The most common access specifiers are:

public: When a class or method is declared as public, it is accessible from anywhere in the program.
private: Declaring something as private restricts its access to within the class it is declared in.
protected: A protected entity is accessible within its own package and by subclasses.
If no access specifier is used, Java assigns a default access level, known as package-private, meaning the class or method is accessible only within its own package.

main method role and its components explanation

class Basics {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
The main method is the entry point for any Java program. It is the method that the Java Virtual Machine (JVM) calls to start the execution of a program. 
The main method must be declared as public, static, and void, and it must accept an array of strings as an argument.

Let us understand this code snippet piecewise.

Basics(Class Name): In the code snippet, the class name is "Basics" which must resemble the name of the Java file for proper execution.

Main method: The main method in Java serves as the entry point for any Java application. The Java runtime starts the execution of a program with the main method.

public (Access Specifier): In the code snippet, the access specifier given to the main class is public allowing it to be accessed from anywhere in the program.

static Keyword: The static keyword is crucial because it allows the Java Virtual Machine (JVM) to call the main method without creating an instance of the class. This is necessary because the main method is executed before any objects of the class are created.

void: This represents the return type of the main method. It is kept void if nothing is returned from the function.

String[] args: This is required to store the Command Line Inputs (if passed) when executing the JAVA program using a Command Line.

Statement: A statement to print "Hello World" is added inside the main method.

Static Methods:
A static method belongs to the class rather than any instance of the class. 
This allows for calling a static method directly using the class name without the need to create an object. For example:

class Example {
    static void display() {
        System.out.println("Static Method");
    }
    public static void main(String[] args) {
        display();
    }
}
In the code snippet above, the display() method is declared as static.
This allows the main method to call the display() method directly using the class name Example without creating an object of the class.

Creating and Using Objects:
In Java, objects are instances(copies) of classes. To access non-static methods, 
an object of the class must be created using the new keyword, followed by the class constructor. For example:

ClassName objName = new ClassName();

example
package JAVA_OOPS;
 class test{
    //paramaterized method to return sum of two numbers
    public  int sum(int a, int b){
        return a+b;
    }
 }
 class sum {
    public static void main(String[] args) {
        test test1= new test();
        System.out.println(test1.sum(5, 6));
    }
    
}
here test class is created and object of test class is created in sum class and sum method is called using object of test class.

Arguments in Methods:
Arguments are the values or variables passed to a function or method when it is called. 
These arguments provide the necessary inputs that the function uses to perform its operations. For example:

class Example {
    void display(int x, int y) {
        System.out.println("The sum is: " + (x + y));
    }
    public static void main(String[] args) {
        Example obj = new Example();
        obj.display(5, 10);
    }
}

Constructors:
In Object-Oriented Programming (OOP) in Java, a constructor is a special type of method used to initialize objects. It is called automatically when an object of a class is created. The constructor's main role is to set initial values for the object's attributes and perform any necessary setup tasks. Key Points:

Same Name as Class: A constructor has the same name as the class it belongs to.
No Return Type: Constructors do not have a return type, not even void.
Called Automatically: When an object is created using the new keyword, the constructor is called automatically.
Types of Constructors: Java provides two types of constructors: Default Constructor and Parameterized Constructor.
Types of Constructors:
Default Constructor: A default constructor is a constructor that has no parameters. If no constructor is defined in a class, Java automatically provides a default constructor that initializes object fields to their default values
Parameterized Constructor: A parameterized constructor allows passing arguments to the constructor so that specific values can be assigned to object attributes at the time of creation.
Note: In Java, a class can have multiple constructors, a concept known as constructor overloading. This allows the class to have different constructors with varying parameters. Each constructor can perform different initializations based on the number or type of arguments passed during object creation.
Encapsulation:
Encapsulation is one of the core concepts of Object-Oriented Programming (OOP). It refers to the practice of bundling data (variables) and methods (functions) that operate on the data into a single unit, known as a class, and restricting direct access to the data from outside the class.

Key Points:

Data Hiding: Encapsulation hides the internal details of how an object works. The object's data is kept private and can only be accessed or modified through methods (getters and setters).
Controlled Access: Through encapsulation, only specific methods are provided to access or modify the data, ensuring more controlled and secure interactions with the object's data.
For example: